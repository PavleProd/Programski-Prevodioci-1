package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROGRAM, BREAK, CLASS, ELSE, CONST, IF, NEW, PRINT, READ, RETURN, VOID;
terminal EXTENDS, CONTINUE, FOR, STATIC, NAMESPACE;

terminal LBRACE, RBRACE, LPAREN, RPAREN, LBRACK, RBRACK;
terminal PLUS, MINUS, MUL, DIV, MOD;
terminal EQUAL, DOUBLE_EQUAL, NOT_EQUAL;
terminal GT, GTE, LT, LTE, AND, OR;
terminal INC, DEC;
terminal SEMICOLON, COLON, DOUBLE_COLON, COMMA, DOT;

terminal Integer INT;
terminal Boolean BOOL;
terminal Character CHAR;
terminal String IDENT;

nonterminal Program, Type;
nonterminal Namespace, Declaration, DeclarationList;
nonterminal ConstDeclaration, ConstDeclarationList, ConstDeclarationElement, ConstValue;
nonterminal VarDeclarationOptional, VarDeclaration, VarList, VarListElement, VarOrArray;
nonterminal MethodDeclaration, MethodDeclarationType, FormPars, FormParsList, Parameter, Statement, Statements;

nonterminal ExprOptional, Expr, ExprRelopOptional, ActPars, ActParsOptionalBrackets;
nonterminal Term, AddTerms, AddTermsList, AddTerm;
nonterminal Factor, MulFactors, MulFactorsList, MulFactor;
nonterminal MinusOptional, Label, AssignOp, Relop, AddOp, MulOp;
nonterminal Designator, Members, MemberList, Member, ArrayOrVarMember;

nonterminal ElseOptional, NumConstOptional;
nonterminal Condition, CondTerm, CondFact;

precedence left ELSE;

/* PROGRAM */

Program ::= (Program) PROGRAM IDENT:programName Namespace DeclarationList LBRACE MethodDeclaration RBRACE
			;
			
Type ::= IDENT:typeName
		 |
		 Type DOUBLE_COLON IDENT:typeName
		 ;

Namespace ::= NAMESPACE IDENT:namespaceName LBRACE DeclarationList LBRACE MethodDeclaration RBRACE RBRACE
			  |
			  /* EPSILON */
			  ;

DeclarationList ::= DeclarationList Declaration
					| /* EPSILON */
					;

Declaration ::= ConstDeclaration SEMICOLON
				|
				VarDeclaration SEMICOLON
				;

/* CONST DECLARATION */

ConstDeclaration ::= CONST Type ConstDeclarationList
					 ;
		 
ConstDeclarationList ::= ConstDeclarationElement
						 |
						 ConstDeclarationList COMMA ConstDeclarationElement
						 ;

ConstDeclarationElement ::= IDENT:varName EQUAL ConstValue
							;
						
ConstValue ::= INT
			   |
			   BOOL
			   |
			   CHAR
			   ;

/* VAR DECLARATION */
VarDeclarationOptional ::= VarDeclaration
						   |
						   /* EPSILON */
						   ;

VarDeclaration ::= Type VarList
				   ;

VarList ::= VarListElement
			|
			VarList COMMA VarListElement
			;
			
VarListElement ::= IDENT:elementName VarOrArray
				   ;
				  
VarOrArray ::= LBRACK RBRACK
			   |
			   /* EPSILON */
			   ;
	
/* METODE */	
		   
MethodDeclaration ::= MethodDeclarationType IDENT:methodName LPAREN FormPars RPAREN VarDeclarationOptional LBRACE Statements RBRACE
					  |
					  /* EPSILON */
					  ;
					  
MethodDeclarationType ::= Type
						  |
						  VOID
						  ;

FormPars ::= FormParsList
			 |
			 /* EPSILON */
			 ;
			 
FormParsList ::= FormParsList COMMA Parameter
				 |
				 Parameter
				 ;
			 
Parameter ::= Type VarListElement
			  ;
			  
Statements ::= Statements Statement
			   |
			   /* EPSILON */
			   ;
			 
Statement ::= BREAK SEMICOLON
			  |
			  CONTINUE SEMICOLON
			  |
			  RETURN ExprOptional SEMICOLON
			  |
			  READ LPAREN Designator RPAREN SEMICOLON
			  |
			  PRINT LPAREN Expr NumConstOptional RPAREN SEMICOLON
			  |
			  IF LPAREN Condition RPAREN Statement ElseOptional
			  ;
			  
ElseOptional ::= ELSE Statement
				 |
				 /* EPSILON */
				 ;
			  
NumConstOptional ::= COMMA INT
				     |
				     /* EPSILON */
				     ;
		     
/* CONDITION */

Condition ::= CondTerm
			  |
			  Condition OR CondTerm
			  ;
				
CondTerm ::= CondFact
			 |
			 CondTerm AND CondFact
			 ;

CondFact ::= Expr ExprRelopOptional
			 ;

/* EXPR */

ExprRelopOptional ::= Relop Expr
					  |
					  /* EPSILON */;

ExprOptional ::= Expr
				 |
				 /* EPSILON */
				 ;
				 
ActParsOptionalBrackets ::= LPAREN ActPars RPAREN
							|
							/* EPSILON */
							;
							
ActPars ::= Expr
			|
			ActPars COMMA Expr
			;
		  
Expr ::= MinusOptional Term AddTerms
		 ;

/* TERM */

Term ::= Factor MulFactors
		;
		
AddTerms ::= AddTermsList
			 |
			 /* Epsilon */
			 ;

AddTermsList ::= AddTermsList AddTerm
				 |
				 AddTerm
				 ;
				 
AddTerm ::= AddOp Term
			;

/* FACTOR */

Factor ::= Designator ActParsOptionalBrackets
		   |
		   ConstValue /* int, bool, char konstanta */
		   |
		   LPAREN Expr RPAREN
		   ;
	
MulFactors ::= MulFactorsList
			 |
			 /* Epsilon */
			 ;

MulFactorsList ::= MulFactorsList MulFactor
				 |
				 MulFactor
				 ;
				 
MulFactor ::= MulOp Factor
			;

MinusOptional ::= MINUS
			      |
			      /* EPSILON */
			      ;

/* DESIGNATOR */

Designator ::= Type Members
			   ;
			   
Members ::= MemberList
			|
			/* EPSILON */
			;
			  
MemberList ::= MemberList Member
			   |
			   Member
			   ;

Member ::= DOT ArrayOrVarMember
		   ;
		   
ArrayOrVarMember ::= IDENT:varValue
					 |
					 LBRACK Expr RBRACK
					 ;

Label ::= IDENT:label
		 ;

AssignOp ::= EQUAL;

Relop ::= DOUBLE_EQUAL
		  |
		  NOT_EQUAL
		  |
		  GT
		  |
		  GTE
		  |
		  LT
		  |
		  LTE
		  ;

AddOp ::= PLUS
		  |
		  MINUS
		  ;
			 
MulOp ::= MUL
		  |
		  DIV
		  |
		  MOD
		  ;
			  


















